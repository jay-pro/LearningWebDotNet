// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lms.Models;

namespace lms.Migrations
{
    [DbContext(typeof(LMSContext))]
    [Migration("20210909023954_update-user_9-9")]
    partial class updateuser_99
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("lms.Models.Assignment", b =>
                {
                    b.Property<string>("IDAssignemnt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDClass")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IDAssignemnt");

                    b.HasIndex("IDClass");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("lms.Models.AssignmentSubmission", b =>
                {
                    b.Property<string>("IDAssignmentSubmission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDAssignemnt")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDStudent")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IDAssignmentSubmission");

                    b.HasIndex("IDAssignemnt");

                    b.HasIndex("IDStudent");

                    b.ToTable("AssignmentSubmission");
                });

            modelBuilder.Entity("lms.Models.Attendance", b =>
                {
                    b.Property<string>("IDAttendance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<int>("isChecked")
                        .HasColumnType("int");

                    b.HasKey("IDAttendance");

                    b.HasIndex("IDUser");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("lms.Models.Class", b =>
                {
                    b.Property<string>("IDClass")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDCourse")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDCreator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDTeacher")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("IDClass");

                    b.HasIndex("IDCourse");

                    b.HasIndex("IDCreator");

                    b.HasIndex("IDTeacher");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("lms.Models.ClassAdmin", b =>
                {
                    b.Property<string>("IDClassAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IDClassAdmin");

                    b.HasIndex("IDUser");

                    b.ToTable("ClassAdmin");
                });

            modelBuilder.Entity("lms.Models.Comment", b =>
                {
                    b.Property<string>("IDComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IDComment");

                    b.HasIndex("IDUser");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("lms.Models.Course", b =>
                {
                    b.Property<string>("IDCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDCreator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RegistedNumber")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDCourse");

                    b.HasIndex("IDCreator");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("lms.Models.CourseDetail", b =>
                {
                    b.Property<string>("IDCourseDetail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDCourse")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LessonDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDCourseDetail");

                    b.HasIndex("IDCourse");

                    b.ToTable("CourseDetails");
                });

            modelBuilder.Entity("lms.Models.CourseFeedback", b =>
                {
                    b.Property<string>("IDCourseFeedback")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDCourse")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.HasKey("IDCourseFeedback");

                    b.HasIndex("IDCourse");

                    b.HasIndex("IDUser");

                    b.ToTable("CourseFeedback");
                });

            modelBuilder.Entity("lms.Models.Enrollment", b =>
                {
                    b.Property<string>("IDEnrollment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDClass")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDStudent")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("IDEnrollment");

                    b.HasIndex("IDClass");

                    b.HasIndex("IDStudent");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("lms.Models.Instructor", b =>
                {
                    b.Property<string>("IDInstuctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IDInstuctor");

                    b.HasIndex("IDUser");

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("lms.Models.Mentor", b =>
                {
                    b.Property<string>("IDMentor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IDMentor");

                    b.HasIndex("IDUser");

                    b.ToTable("Mentor");
                });

            modelBuilder.Entity("lms.Models.Notify", b =>
                {
                    b.Property<string>("IDNotify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CretatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDNotify");

                    b.ToTable("Notify");
                });

            modelBuilder.Entity("lms.Models.Quizz", b =>
                {
                    b.Property<string>("IDQuizz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("IDCourseDetail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuizzName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TotalQuestion")
                        .HasColumnType("int");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.HasKey("IDQuizz");

                    b.HasIndex("IDCourseDetail");

                    b.ToTable("Quizz");
                });

            modelBuilder.Entity("lms.Models.QuizzDetail", b =>
                {
                    b.Property<string>("IDQuizzDetail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AChoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BChoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CChoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DChoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDQuizz")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDQuizzDetail");

                    b.HasIndex("IDQuizz");

                    b.ToTable("QuizzDetail");
                });

            modelBuilder.Entity("lms.Models.QuizzScore", b =>
                {
                    b.Property<string>("IDQuizzScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDQuizz")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Score")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDQuizzScore");

                    b.HasIndex("IDUser");

                    b.ToTable("QuizzScore");
                });

            modelBuilder.Entity("lms.Models.Rating", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("lms.Models.Reply", b =>
                {
                    b.Property<string>("IDReply")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CretatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDComment")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IDReply");

                    b.HasIndex("IDComment");

                    b.HasIndex("IDUser");

                    b.ToTable("Reply");
                });

            modelBuilder.Entity("lms.Models.ScoreBroad", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Final")
                        .HasColumnType("int");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Process")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuizz")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScoreBroad");
                });

            modelBuilder.Entity("lms.Models.Student", b =>
                {
                    b.Property<string>("IDStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("isChecked")
                        .HasColumnType("int");

                    b.HasKey("IDStudent");

                    b.HasIndex("UserId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("lms.Models.StudentFeedback", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudentFeedbacks");
                });

            modelBuilder.Entity("lms.Models.SystemAdmin", b =>
                {
                    b.Property<string>("IDSystemAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IDSystemAdmin");

                    b.HasIndex("IDUser");

                    b.ToTable("SystemAdmin");
                });

            modelBuilder.Entity("lms.Models.Teacher", b =>
                {
                    b.Property<string>("IDTeacher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IDTeacher");

                    b.HasIndex("IDUser");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("lms.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IDUser");

                    b.ToTable("User");
                });

            modelBuilder.Entity("lms.Models.Assignment", b =>
                {
                    b.HasOne("lms.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("IDClass");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("lms.Models.AssignmentSubmission", b =>
                {
                    b.HasOne("lms.Models.Assignment", "Assignment")
                        .WithMany("AssignmentSubmission")
                        .HasForeignKey("IDAssignemnt");

                    b.HasOne("lms.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("IDStudent");

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("lms.Models.Attendance", b =>
                {
                    b.HasOne("lms.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IDUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lms.Models.Class", b =>
                {
                    b.HasOne("lms.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("IDCourse");

                    b.HasOne("lms.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("IDCreator");

                    b.HasOne("lms.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("IDTeacher");

                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("lms.Models.ClassAdmin", b =>
                {
                    b.HasOne("lms.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IDUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lms.Models.Comment", b =>
                {
                    b.HasOne("lms.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IDUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lms.Models.Course", b =>
                {
                    b.HasOne("lms.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("IDCreator");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("lms.Models.CourseDetail", b =>
                {
                    b.HasOne("lms.Models.Course", "Course")
                        .WithMany("CourseDetail")
                        .HasForeignKey("IDCourse");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("lms.Models.CourseFeedback", b =>
                {
                    b.HasOne("lms.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("IDCourse");

                    b.HasOne("lms.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IDUser");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lms.Models.Enrollment", b =>
                {
                    b.HasOne("lms.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("IDClass");

                    b.HasOne("lms.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("IDStudent");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("lms.Models.Instructor", b =>
                {
                    b.HasOne("lms.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IDUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lms.Models.Mentor", b =>
                {
                    b.HasOne("lms.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IDUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lms.Models.Quizz", b =>
                {
                    b.HasOne("lms.Models.CourseDetail", "CourseDetail")
                        .WithMany("Quizz")
                        .HasForeignKey("IDCourseDetail");

                    b.Navigation("CourseDetail");
                });

            modelBuilder.Entity("lms.Models.QuizzDetail", b =>
                {
                    b.HasOne("lms.Models.Quizz", "Quizz")
                        .WithMany()
                        .HasForeignKey("IDQuizz");

                    b.Navigation("Quizz");
                });

            modelBuilder.Entity("lms.Models.QuizzScore", b =>
                {
                    b.HasOne("lms.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IDUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lms.Models.Reply", b =>
                {
                    b.HasOne("lms.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("IDComment");

                    b.HasOne("lms.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IDUser");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lms.Models.Student", b =>
                {
                    b.HasOne("lms.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lms.Models.StudentFeedback", b =>
                {
                    b.HasOne("lms.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("lms.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("lms.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Class");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("lms.Models.SystemAdmin", b =>
                {
                    b.HasOne("lms.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IDUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lms.Models.Teacher", b =>
                {
                    b.HasOne("lms.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IDUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lms.Models.User", b =>
                {
                    b.HasOne("lms.Models.Notify", null)
                        .WithMany("User")
                        .HasForeignKey("IDUser");
                });

            modelBuilder.Entity("lms.Models.Assignment", b =>
                {
                    b.Navigation("AssignmentSubmission");
                });

            modelBuilder.Entity("lms.Models.Course", b =>
                {
                    b.Navigation("CourseDetail");
                });

            modelBuilder.Entity("lms.Models.CourseDetail", b =>
                {
                    b.Navigation("Quizz");
                });

            modelBuilder.Entity("lms.Models.Notify", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
